import java.util.*;

class Coordinate {
    int x, y;

    public Coordinate(int x, int y) {
        this.x = x;
        this.y = y;
    }
}

class Edge {
    Coordinate destination;
    int powerRequired;

    public Edge(Coordinate destination, int powerRequired) {
        this.destination = destination;
        this.powerRequired = powerRequired;
    }
}

public class GManGame {
    static final int N = 6; // Grid size

    public static int findShortestPath(int[][] grid, Coordinate source, Coordinate dest) {
        PriorityQueue<Edge> minHeap = new PriorityQueue<>(Comparator.comparingInt(e -> e.powerRequired));
        int[][] power = new int[N][N];
        
        // Initialize power matrix with maximum values
        for (int i = 0; i < N; i++) {
            Arrays.fill(power[i], Integer.MAX_VALUE);
        }

        power[source.x][source.y] = 0;
        minHeap.offer(new Edge(source, 0));

        while (!minHeap.isEmpty()) {
            Edge currentEdge = minHeap.poll();
            Coordinate current = currentEdge.destination;
            int currentPower = currentEdge.powerRequired;

            if (current.x == dest.x && current.y == dest.y) {
                return currentPower;
            }

            if (currentPower > power[current.x][current.y]) {
                continue; // Skip if we have a better path to this node.
            }

            for (int dx = -1; dx <= 1; dx++) {
                for (int dy = -1; dy <= 1; dy++) {
                    int newX = current.x + dx;
                    int newY = current.y + dy;

                    if (isValid(newX, newY)) {
                        int newPower = currentPower + grid[newX][newY];
                        if (newPower < power[newX][newY]) {
                            power[newX][newY] = newPower;
                            minHeap.offer(new Edge(new Coordinate(newX, newY), newPower));
                        }
                    }
                }
            }
        }

        return -1; // Destination not reachable
    }

    public static boolean isValid(int x, int y) {
        return x >= 0 && x < N && y >= 0 && y < N;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read source coordinates and direction
        int sourceX = scanner.nextInt();
        int sourceY = scanner.nextInt();
        String direction = scanner.next();

        // Read destination coordinates
        int destX = scanner.nextInt();
        int destY = scanner.nextInt();

        // Read the grid
        int[][] grid = {
            {1, 2, 3, 4, 5, 6},
            {2, 3, 4, 5, 6, 7},
            {3, 4, 5, 6, 7, 8},
            {4, 5, 6, 7, 8, 9},
            {5, 6, 7, 8, 9, 10},
            {6, 7, 8, 9, 10, 11}
        };

        // Calculate the shortest path power consumption
        int remainingPower = findShortestPath(grid, new Coordinate(sourceX, sourceY), new Coordinate(destX, destY));

        System.out.println("POWER " + remainingPower);
    }
}
